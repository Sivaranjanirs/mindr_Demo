name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Create test data directory
      run: |
        mkdir -p backend/test_data
        echo "Test content for sleep" > backend/test_data/sleep.md
        echo "Test content for nutrition" > backend/test_data/nutrition.md
    
    - name: Run backend tests
      run: |
        cd backend
        pytest --verbose --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test data
      run: |
        mkdir -p data/snippets
        echo "Title: Test Sleep Content" > data/snippets/test-sleep.md
        echo "Key ideas: Sleep hygiene basics" >> data/snippets/test-sleep.md
        echo "" >> data/snippets/test-sleep.md
        echo "## Sleep Tips" >> data/snippets/test-sleep.md
        echo "1. Maintain consistent schedule" >> data/snippets/test-sleep.md
        echo "2. Create dark environment" >> data/snippets/test-sleep.md
        
        echo "Title: Test Nutrition Content" > data/snippets/test-nutrition.md
        echo "Key ideas: Healthy eating habits" >> data/snippets/test-nutrition.md
        echo "" >> data/snippets/test-nutrition.md
        echo "## Nutrition Guidelines" >> data/snippets/test-nutrition.md
        echo "1. Eat whole foods" >> data/snippets/test-nutrition.md
        echo "2. Stay hydrated" >> data/snippets/test-nutrition.md
    
    - name: Build and start application
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost/; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Install Playwright
      run: |
        cd e2e-tests
        npm ci
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        cd e2e-tests
        npx playwright test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker builds
      run: |
        # Test backend Docker build
        docker build -t mindr-backend-test ./backend
        
        # Test frontend Docker build
        docker build -t mindr-frontend-test ./frontend
        
        # Test that images were created successfully
        docker images | grep mindr-backend-test
        docker images | grep mindr-frontend-test
    
    - name: Test Docker Compose
      run: |
        # Create minimal test data
        mkdir -p data/snippets
        echo "Test content" > data/snippets/test.md
        
        # Test docker-compose build
        docker-compose build
        
        # Test that services start
        docker-compose up -d
        sleep 20
        
        # Test health endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost/
        
        # Cleanup
        docker-compose down -v